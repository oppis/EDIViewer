@page "/file-viewer"
@rendermode InteractiveServer

<PageTitle>EDI Viewer - File Viewer</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Style="gap: 20px;">
    <FluentCard>
        <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
            <FluentLabel Typography="Typography.Subject">📄 EDI File Viewer</FluentLabel>
            <FluentLabel Typography="Typography.Body">
                Laden Sie eine EDI-Datei und wählen Sie ein Format zur Analyse aus.
            </FluentLabel>
        </FluentStack>
    </FluentCard>
    
    <FluentGrid>
        <FluentGridItem xs="12" md="6">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
                    <FluentLabel Typography="Typography.BodyStrong">EDI-Datei auswählen</FluentLabel>
                    
                    <FluentInputFile Id="edi-file-input"
                                   OnFileChange="OnFileSelected"
                                   Accept=".txt,.edi"
                                   MaxFileSize="10485760">
                        📁 EDI-Datei wählen...
                    </FluentInputFile>
                    
                    @if (!string.IsNullOrEmpty(selectedFileName))
                    {
                        <FluentLabel Typography="Typography.Caption">
                            Ausgewählte Datei: @selectedFileName
                        </FluentLabel>
                    }
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
        
        <FluentGridItem xs="12" md="6">
            <FluentCard>
                <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
                    <FluentLabel Typography="Typography.BodyStrong">Format auswählen</FluentLabel>
                    
                    <FluentSelect @bind-Value="selectedFormatPath" TOption="string">
                        <FluentOption Value="">-- Format wählen --</FluentOption>
                        @foreach (var format in availableFormats)
                        {
                            <FluentOption Value="@format.Path">@format.Name</FluentOption>
                        }
                    </FluentSelect>
                    
                    <FluentButton OnClick="ProcessFile" 
                                Disabled="@(string.IsNullOrEmpty(selectedFileName) || string.IsNullOrEmpty(selectedFormatPath))"
                                Appearance="Appearance.Accent">
                        ▶️ Datei verarbeiten
                    </FluentButton>
                </FluentStack>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>
    
    @if (contentInformation != null)
    {
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
                <FluentLabel Typography="Typography.BodyStrong">Verarbeitete Daten</FluentLabel>
                
                <FluentTabs>
                    <FluentTab Text="Raw Information">
                        <FluentDataGrid Items="@rawInformationItems.AsQueryable()" ResizableColumns="true" Style="height: 400px; overflow: auto;">
                            <PropertyColumn Property="@(r => r.RecordTyp)" Title="Satzart" />
                            <PropertyColumn Property="@(r => r.Field)" Title="Feld" />
                            <PropertyColumn Property="@(r => r.FieldContent)" Title="Inhalt" />
                            <PropertyColumn Property="@(r => r.FileRow)" Title="Zeile" />
                        </FluentDataGrid>
                    </FluentTab>
                    
                    <FluentTab Text="Transfer Information">
                        @if (contentInformation.TransferInformation != null)
                        {
                            <FluentStack Orientation="Orientation.Vertical" Style="gap: 10px;">
                                @foreach (var item in contentInformation.TransferInformation)
                                {
                                    <FluentStack Orientation="Orientation.Horizontal" Style="gap: 10px;">
                                        <FluentLabel Typography="Typography.BodyStrong">@item.Key:</FluentLabel>
                                        <FluentLabel Typography="Typography.Body">@item.Value</FluentLabel>
                                    </FluentStack>
                                }
                            </FluentStack>
                        }
                    </FluentTab>
                </FluentTabs>
            </FluentStack>
        </FluentCard>
    }
</FluentStack>

@code {
    private string selectedFileName = string.Empty;
    private string selectedFormatPath = string.Empty;
    private string? fileContent;
    private ContentInformation? contentInformation;
    private List<RawInformation> rawInformationItems = new();
    
    private readonly List<FormatInfo> availableFormats = new();
    
    protected override async Task OnInitializedAsync()
    {
        LoadAvailableFormats();
        await base.OnInitializedAsync();
    }
    
    private void LoadAvailableFormats()
    {
        try
        {
            var formatFiles = FormatFiles.GetFormatFiles();
            
            availableFormats.Clear();
            foreach (var format in formatFiles)
            {
                availableFormats.Add(new FormatInfo 
                { 
                    Name = format.FormatName, 
                    Path = format.FullPath 
                });
            }
        }
        catch (Exception ex)
        {
            // Log error - in a real app you'd use proper logging
            Console.WriteLine($"Error loading formats: {ex.Message}");
        }
    }
    
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFileName = e.File.Name;
            
            using var stream = e.File.OpenReadStream(maxAllowedSize: 10485760); // 10MB limit
            using var reader = new StreamReader(stream);
            fileContent = await reader.ReadToEndAsync();
        }
        catch (Exception ex)
        {
            selectedFileName = string.Empty;
            fileContent = null;
            // Show error message
            Console.WriteLine($"Error reading file: {ex.Message}");
        }
    }
    
    private void ProcessFile()
    {
        if (string.IsNullOrEmpty(fileContent) || string.IsNullOrEmpty(selectedFormatPath))
            return;
            
        try
        {
            var parser = new ParseFile();
            parser.GetFileStructur(selectedFormatPath);
            
            // Write content to temporary file for processing
            var tempFile = Path.GetTempFileName();
            File.WriteAllText(tempFile, fileContent);
            
            parser.ProcessCurrentFile(File.ReadAllLines(tempFile));
            contentInformation = parser.contentInformation;
            
            // Update raw information items for display
            if (contentInformation?.RawInformations != null)
            {
                rawInformationItems = contentInformation.RawInformations.ToList();
            }
            
            // Clean up temp file
            File.Delete(tempFile);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            contentInformation = null;
            Console.WriteLine($"Error processing file: {ex.Message}");
        }
    }
    
    private class FormatInfo
    {
        public string Name { get; set; } = string.Empty;
        public string Path { get; set; } = string.Empty;
    }
}