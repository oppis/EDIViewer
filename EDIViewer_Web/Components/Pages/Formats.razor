@page "/formats"
@rendermode InteractiveServer

<PageTitle>EDI Viewer - Format Management</PageTitle>

<FluentStack Orientation="Orientation.Vertical" Style="gap: 20px;">
    <FluentCard>
        <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" Style="gap: 10px;">
                <FluentIcon Icon="Icons.Regular.Size24.Settings" Color="Color.Accent" />
                <FluentLabel Typography="Typography.Subject">Format Management</FluentLabel>
            </FluentStack>
            
            <FluentText Typography="Typography.Body">
                Verwalten Sie JSON-Format-Definitionen für verschiedene EDI-Typen.
            </FluentText>
        </FluentStack>
    </FluentCard>
    
    <FluentCard>
        <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Start" Style="gap: 10px;">
                <FluentLabel Typography="Typography.BodyStrong">Verfügbare Formate</FluentLabel>
                <FluentButton OnClick="RefreshFormats" Appearance="Appearance.Outline">
                    <FluentIcon Icon="Icons.Regular.Size16.ArrowSync" />
                    Aktualisieren
                </FluentButton>
            </FluentStack>
            
            @if (availableFormats.Any())
            {
                <FluentDataGrid Items="availableFormats" ResizableColumns="true" Style="width: 100%;">
                    <PropertyColumn Property="@(f => f.FormatName)" Title="Format Name" />
                    <PropertyColumn Property="@(f => f.FormatComment)" Title="Kommentar" />
                    <PropertyColumn Property="@(f => f.FormatVersion)" Title="Version" />
                    <PropertyColumn Property="@(f => f.FormatDetection)" Title="Detection" />
                    <TemplateColumn Title="Aktionen">
                        <FluentStack Orientation="Orientation.Horizontal" Style="gap: 5px;">
                            <FluentButton OnClick="@(() => ViewFormat(context))" 
                                        Size="Size.Small"
                                        Appearance="Appearance.Outline">
                                <FluentIcon Icon="Icons.Regular.Size16.Eye" />
                                Anzeigen
                            </FluentButton>
                        </FluentStack>
                    </TemplateColumn>
                </FluentDataGrid>
            }
            else
            {
                <FluentText Typography="Typography.Body">
                    Keine Formate gefunden. Stellen Sie sicher, dass Format-Dateien im Formats-Ordner vorhanden sind.
                </FluentText>
            }
        </FluentStack>
    </FluentCard>
    
    @if (selectedFormat != null)
    {
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
                <FluentLabel Typography="Typography.BodyStrong">Format Details: @selectedFormat.FormatName</FluentLabel>
                
                <FluentTabs>
                    <FluentTab Text="Allgemein">
                        <FluentStack Orientation="Orientation.Vertical" Style="gap: 10px; padding: 15px;">
                            <FluentStack Orientation="Orientation.Horizontal" Style="gap: 10px;">
                                <FluentLabel Typography="Typography.BodyStrong">Name:</FluentLabel>
                                <FluentText>@selectedFormat.FormatName</FluentText>
                            </FluentStack>
                            <FluentStack Orientation="Orientation.Horizontal" Style="gap: 10px;">
                                <FluentLabel Typography="Typography.BodyStrong">Kommentar:</FluentLabel>
                                <FluentText>@selectedFormat.FormatComment</FluentText>
                            </FluentStack>
                            <FluentStack Orientation="Orientation.Horizontal" Style="gap: 10px;">
                                <FluentLabel Typography="Typography.BodyStrong">Version:</FluentLabel>
                                <FluentText>@selectedFormat.FormatVersion</FluentText>
                            </FluentStack>
                            <FluentStack Orientation="Orientation.Horizontal" Style="gap: 10px;">
                                <FluentLabel Typography="Typography.BodyStrong">Trennzeichen:</FluentLabel>
                                <FluentText>@selectedFormat.FormatSeparator</FluentText>
                            </FluentStack>
                        </FluentStack>
                    </FluentTab>
                    
                    <FluentTab Text="Format Types">
                        @if (selectedFormat.FormatTypes?.Any() == true)
                        {
                            <FluentAccordion Style="padding: 15px;">
                                @foreach (var formatType in selectedFormat.FormatTypes)
                                {
                                    <FluentAccordionItem Heading="@formatType.Name">
                                        <FluentStack Orientation="Orientation.Vertical" Style="gap: 10px;">
                                            <FluentText><strong>Beschreibung:</strong> @formatType.Description</FluentText>
                                            <FluentText><strong>Detection:</strong> @formatType.Detection</FluentText>
                                            
                                            @if (formatType.RecordTypes?.Any() == true)
                                            {
                                                <FluentLabel Typography="Typography.BodyStrong">Record Types:</FluentLabel>
                                                <FluentDataGrid Items="formatType.RecordTypes" Style="max-height: 300px;">
                                                    <PropertyColumn Property="@(r => r.Position)" Title="Position" />
                                                    <PropertyColumn Property="@(r => r.Name)" Title="Name" />
                                                    <PropertyColumn Property="@(r => r.RecordDetection)" Title="Detection" />
                                                    <PropertyColumn Property="@(r => r.Mandatory)" Title="Pflichtfeld" />
                                                </FluentDataGrid>
                                            }
                                        </FluentStack>
                                    </FluentAccordionItem>
                                }
                            </FluentAccordion>
                        }
                    </FluentTab>
                </FluentTabs>
            </FluentStack>
        </FluentCard>
    }
</FluentStack>

@code {
    private List<FileStructur> availableFormats = new();
    private FileStructur? selectedFormat;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableFormats();
        await base.OnInitializedAsync();
    }
    
    private async Task LoadAvailableFormats()
    {
        try
        {
            availableFormats.Clear();
            var formatFiles = FormatFiles.GetFormatFiles();
            var formatPath = RegistryHelper.GetFormatFilePath();
            
            foreach (var formatFile in formatFiles)
            {
                try
                {
                    var fullPath = Path.Combine(formatPath, formatFile.FileName);
                    if (File.Exists(fullPath))
                    {
                        var json = await File.ReadAllTextAsync(fullPath);
                        var format = Newtonsoft.Json.JsonConvert.DeserializeObject<FileStructur>(json);
                        if (format != null)
                        {
                            availableFormats.Add(format);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading format {formatFile.FileName}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading formats: {ex.Message}");
        }
        
        StateHasChanged();
    }
    
    private async Task RefreshFormats()
    {
        await LoadAvailableFormats();
    }
    
    private void ViewFormat(FileStructur format)
    {
        selectedFormat = format;
        StateHasChanged();
    }
}