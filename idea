// This is a simple Fortras 100 parser in C#
// It assumes that the input file is a valid Fortras 100 file
// It does not handle errors or exceptions
// It prints the parsed data to the console
// Made by ChatGPT

using System;
using System.IO;
using System.Text;

namespace Fortras100Parser
{
    class Program
    {
        static void Main(string[] args)
        {
            // Read the input file as bytes
            byte[] fileBytes = File.ReadAllBytes("input.fortras");

            // Create a memory stream from the file bytes
            MemoryStream stream = new MemoryStream(fileBytes);

            // Create a binary reader from the stream
            BinaryReader reader = new BinaryReader(stream);

            // Read the first byte as the record type indicator
            byte recordType = reader.ReadByte();

            // Loop until the end of the stream is reached
            while (stream.Position < stream.Length)
            {
                // Switch on the record type indicator
                switch (recordType)
                {
                    case 0x01: // Header record
                        ParseHeaderRecord(reader);
                        break;
                    case 0x02: // Data record
                        ParseDataRecord(reader);
                        break;
                    case 0x03: // Trailer record
                        ParseTrailerRecord(reader);
                        break;
                    default: // Unknown record type
                        Console.WriteLine("Unknown record type: {0}", recordType);
                        break;
                }

                // Read the next byte as the record type indicator
                recordType = reader.ReadByte();
            }

            // Close the reader and the stream
            reader.Close();
            stream.Close();
        }

        // Parse a header record and print its fields to the console
        static void ParseHeaderRecord(BinaryReader reader)
        {
            Console.WriteLine("Header record:");

            // Read and print the sender identification (8 bytes)
            string senderId = Encoding.ASCII.GetString(reader.ReadBytes(8));
            Console.WriteLine("Sender identification: {0}", senderId);

            // Read and print the recipient identification (8 bytes)
            string recipientId = Encoding.ASCII.GetString(reader.ReadBytes(8));
            Console.WriteLine("Recipient identification: {0}", recipientId);

            // Read and print the message type (4 bytes)
            string messageType = Encoding.ASCII.GetString(reader.ReadBytes(4));
            Console.WriteLine("Message type: {0}", messageType);

            // Read and print the message number (6 bytes)
            string messageNumber = Encoding.ASCII.GetString(reader.ReadBytes(6));
            Console.WriteLine("Message number: {0}", messageNumber);

            // Read and print the message date (6 bytes)
            string messageDate = Encoding.ASCII.GetString(reader.ReadBytes(6));
            Console.WriteLine("Message date: {0}", messageDate);

            // Read and print the message time (4 bytes)
            string messageTime = Encoding.ASCII.GetString(reader.ReadBytes(4));
            Console.WriteLine("Message time: {0}", messageTime);

            // Read and print the test indicator (1 byte)
            byte testIndicator = reader.ReadByte();
            Console.WriteLine("Test indicator: {0}", testIndicator);

            // Read and print the filler (3 bytes)
            byte[] filler = reader.ReadBytes(3);
            Console.WriteLine("Filler: {0}", BitConverter.ToString(filler));

        }

        // Parse a data record and print its fields to the console
        static void ParseDataRecord(BinaryReader reader)
        {
            Console.WriteLine("Data record:");

            // Read and print the data segment identifier (2 bytes)
            string dataSegmentId = Encoding.ASCII.GetString(reader.ReadBytes(2));
            Console.WriteLine("Data segment identifier: {0}", dataSegmentId);

            // Read and print the data segment number (4 bytes)
            string dataSegmentNumber = Encoding.ASCII.GetString(reader.ReadBytes(4));
            Console.WriteLine("Data segment number: {0}", dataSegmentNumber);

            // Read and print the data segment length (2 bytes)
            ushort dataSegmentLength = reader.ReadUInt16();
            Console.WriteLine("Data segment length: {0}", dataSegmentLength);

            // Read and print the data segment content (variable length)
            byte[] dataSegmentContent = reader.ReadBytes(dataSegmentLength);
            Console.WriteLine("Data segment content: {0}", BitConverter.ToString(dataSegmentContent));

        }

        // Parse a trailer record and print its fields to the console
        static void ParseTrailerRecord(BinaryReader reader)
        {
            Console.WriteLine("Trailer record:");

            // Read and print the number of data records (4 bytes)
            string numberOfDataRecords = Encoding.ASCII.GetString(reader.ReadBytes(4));
            Console.WriteLine("Number of data records: {0}", numberOfDataRecords);

            // Read and print the filler (12 bytes)
            byte[] filler = reader.ReadBytes(12);
            Console.WriteLine("Filler: {0}", BitConverter.ToString(filler));

        }
    }
}
